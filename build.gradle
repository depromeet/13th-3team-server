import java.util.stream.Collectors

plugins {
	id 'java'
	id "org.sonarqube" version "4.0.0.2929"
}

group = 'me.nalab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

var excludeFromCoverage = new ArrayList<String>()
file('coverage-exclude.luffy').withInputStream(){
	it -> excludeFromCoverage.addAll(new BufferedReader(new InputStreamReader(it))
			.lines()
			.parallel()
			.map(s -> s.substring(7).strip())
			.collect(Collectors.toList()))
}

repositories {
	mavenCentral()
}

dependencies {}

sonar {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'depromeet-1'
		property 'sonar.projectKey', 'depromeet_na-lab-server'
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'

	repositories {
		mavenCentral()
	}

	jacoco {
		toolVersion = '0.8.9'
	}

	test {
		useJUnitPlatform()
		finalizedBy 'jacocoTestReport'
	}

	jacocoTestReport {
		reports {
			html.required = true
			csv.required = true
			xml.required = true
		}
		finalizedBy 'jacocoTestCoverageVerification'
		dependsOn test

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: excludeFromCoverage.stream()
						.map(s -> s + ".class")
						.collect(Collectors.toList()))
			}))
		}
	}

	jacocoTestCoverageVerification {
		violationRules {

			rule {
				enabled = true
				element = 'CLASS'
				excludes += excludeFromCoverage.stream()
								.map(s -> s.replace("/", "."))
								.collect(Collectors.toList())

				limit {
					counter = 'LINE'
					value = 'COVEREDRATIO'
					minimum = 0.70
				}
			}

		}
	}

}

var allProjects = getAllprojects().stream()
		.filter(p -> !p.getDisplayName().contains('root project'))
		.map(p -> p)
		.collect(Collectors.toList())

project(':support:jacoco'){
	apply plugin: 'jacoco-report-aggregation'

	testCodeCoverageReport {
		getClassDirectories().setFrom(files(
				allProjects
						.collect {
							it.fileTree(dir: "${it.buildDir}/classes/java/main", exclude:
									excludeFromCoverage.stream()
											.map(s -> s + ".class")
											.collect(Collectors.toList()))
						})
		)
	}
}